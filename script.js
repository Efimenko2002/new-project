// NoteMap PWA Script ‚Äì v5.1 (–ø–æ–ª–Ω—ã–π)
// ----------------------------------

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
const map = L.map('map').setView([55.75, 37.61], 10);          // –ú–æ—Å–∫–≤–∞ –ø–æ-—É–º–æ–ª—á–∞–Ω–∏—é
L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
  maxZoom: 19,
  attribution: '¬© OpenStreetMap'
}).addTo(map);

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 2. –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã (–Ω–µ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ –∑–∞–º–µ—Ç–∫–∞–º) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
let userMarker   = null;   // —Ç–µ–∫—É—â–µ–µ ¬´–í—ã –∑–¥–µ—Å—å¬ª
let createMarker = null;   // –º–∞—Ä–∫–µ—Ä –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
let editMarker   = null;   // –º–∞—Ä–∫–µ—Ä –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 3. –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
const notes        = JSON.parse(localStorage.getItem('notes') || '[]'); // –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏
let createMode            = false;      // —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é?
let createText            = '';         // —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏
let createCoords          = null;       // –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏
let currentlyEditingIndex = null;       // –∏–Ω–¥–µ–∫—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–π –∑–∞–º–µ—Ç–∫–∏
let editingCoords         = null;       // –Ω–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 4. DOM-—ç–ª–µ–º–µ–Ω—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
const list        = document.getElementById('note-list');
const input       = document.getElementById('note-input');
const saveBtn     = document.getElementById('save-btn');
const locateBtn   = document.getElementById('locate-btn');
const locationInp = document.getElementById('location-input');

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 5. –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
function saveNotes() {
  localStorage.setItem('notes', JSON.stringify(notes));
}
function autoGrow(el) {                 // –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –≤—ã—Å–æ—Ç–∞ textarea
  el.style.height = 'auto';
  el.style.height = el.scrollHeight + 'px';
}
function updateCreateMarker(latlng) {    // –º–∞—Ä–∫–µ—Ä –≤–æ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
  if (createMarker) map.removeLayer(createMarker);
  createMarker = L.marker(latlng, { draggable: false })
                  .addTo(map)
                  .bindPopup('–ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞')
                  .openPopup();
}
function updateEditMarker(latlng) {      // –º–∞—Ä–∫–µ—Ä –≤–æ –≤—Ä–µ–º—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  if (editMarker) map.removeLayer(editMarker);
  editMarker = L.marker(latlng, { draggable: false })
                .addTo(map)
                .bindPopup('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ')
                .openPopup();
}
function redrawMarkers() {
  // —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –º–∞—Ä–∫–µ—Ä—ã (–∫—Ä–æ–º–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö)
  map.eachLayer(l => {
    if (l instanceof L.Marker && ![userMarker, createMarker, editMarker].includes(l)) {
      map.removeLayer(l);
    }
  });
  // –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ
  notes.forEach(n => L.marker(n.latlng)
    .addTo(map)
    .bindPopup(n.text));
}

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 6. –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–º–µ—Ç–æ–∫ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
function renderNotes() {
  list.innerHTML = '';
  redrawMarkers();

  notes.forEach((note, i) => {
    const li = document.createElement('li');

    // ------ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ------
    if (currentlyEditingIndex === i) {
      const ta = document.createElement('textarea');
      ta.value = note.text;
      ta.rows  = 6;
      ta.style.width = '100%';
      ta.style.resize = 'vertical';
      ta.oninput = () => autoGrow(ta);
      autoGrow(ta);

      const coordInput = document.createElement('input');
      coordInput.type  = 'text';
      coordInput.style.width = '100%';
      coordInput.value = `${(editingCoords || note.latlng).lat.toFixed(5)},${(editingCoords || note.latlng).lng.toFixed(5)}`;
      coordInput.oninput = () => {
        const [lat, lng] = coordInput.value.split(',').map(Number);
        if (!isNaN(lat) && !isNaN(lng)) {
          editingCoords = { lat, lng };
          updateEditMarker(editingCoords);
        }
      };
      updateEditMarker(editingCoords || note.latlng);

      const tip = document.createElement('div');
      tip.textContent = '–ö–ª–∏–∫–Ω–∏—Ç–µ –ø–æ –∫–∞—Ä—Ç–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Ä—É—á–Ω—É—é';
      tip.style.fontSize = '0.8em';
      tip.style.color    = '#666';

      const save = document.createElement('button');
      save.textContent = 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å';
      save.onclick = () => {
        note.text = ta.value;
        if (editingCoords) note.latlng = editingCoords;
        currentlyEditingIndex = null;
        editingCoords = null;
        if (editMarker) { map.removeLayer(editMarker); editMarker = null; }
        saveNotes();
        renderNotes();
      };

      const cancel = document.createElement('button');
      cancel.textContent = '‚ùå –û—Ç–º–µ–Ω–∞';
      cancel.onclick = () => {
        currentlyEditingIndex = null;
        editingCoords = null;
        if (editMarker) { map.removeLayer(editMarker); editMarker = null; }
        renderNotes();
      };

      li.append(ta, coordInput, save, cancel, tip);
      list.appendChild(li);
      return;
    }

    // ------ —Ä–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ ------
    const text = document.createElement('div');
    text.textContent     = note.text;
    text.style.whiteSpace= 'pre-wrap';
    text.style.background= '#f7f7f7';
    text.style.padding   = '0.5em';
    text.style.borderRadius = '4px';

    const coord = document.createElement('div');
    coord.textContent = `–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${note.latlng.lat.toFixed(5)}, ${note.latlng.lng.toFixed(5)}`;
    coord.style.fontSize = '0.9em';
    coord.style.color    = '#777';

    const edit = document.createElement('button');
    edit.textContent = '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å';
    edit.onclick = () => {
      currentlyEditingIndex = i;
      editingCoords = null;
      renderNotes();
    };

    const del = document.createElement('button');
    del.textContent = 'üóëÔ∏è';
    del.onclick = () => {
      if (confirm('–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É?')) {
        notes.splice(i, 1);
        saveNotes();
        renderNotes();
      }
    };

    li.append(text, coord, edit, del);
    list.appendChild(li);
  });
}

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 7. –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
function renderCreateForm() {
  list.innerHTML = '';
  const li = document.createElement('li');

  const ta = document.createElement('textarea');
  ta.rows = 6;
  ta.style.width = '100%';
  ta.style.resize = 'vertical';
  ta.value = createText;
  ta.oninput = () => { createText = ta.value; autoGrow(ta); };
  autoGrow(ta);

  const coordInput = document.createElement('input');
  coordInput.type  = 'text';
  coordInput.style.width = '100%';
  if (createCoords) coordInput.value = `${createCoords.lat.toFixed(5)},${createCoords.lng.toFixed(5)}`;
  coordInput.oninput = () => {
    const [lat, lng] = coordInput.value.split(',').map(Number);
    if (!isNaN(lat) && !isNaN(lng)) {
      createCoords = { lat, lng };
      updateCreateMarker(createCoords);
    }
  };
  if (createCoords) updateCreateMarker(createCoords);

  const tip = document.createElement('div');
  tip.textContent = '–ö–ª–∏–∫–Ω–∏—Ç–µ –ø–æ –∫–∞—Ä—Ç–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Ä—É—á–Ω—É—é';
  tip.style.fontSize = '0.8em';
  tip.style.color    = '#666';

  const add = document.createElement('button');
  add.textContent = 'üíæ –î–æ–±–∞–≤–∏—Ç—å';
  add.onclick = () => {
    if (!createCoords) { alert('–£–∫–∞–∂–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã.'); return; }
    notes.push({ text: createText, latlng: createCoords });
    saveNotes();
    if (createMarker) { map.removeLayer(createMarker); createMarker = null; }
    createMode   = false;
    createText   = '';
    createCoords = null;
    renderNotes();
  };

  const cancel = document.createElement('button');
  cancel.textContent = '‚ùå –û—Ç–º–µ–Ω–∞';
  cancel.onclick = () => {
    if (createMarker) { map.removeLayer(createMarker); createMarker = null; }
    createMode   = false;
    createText   = '';
    createCoords = null;
    renderNotes();
  };

  li.append(ta, coordInput, add, cancel, tip);
  list.appendChild(li);
}

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 8. –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞—Ä—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
map.on('click', e => {
  // —Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è
  if (createMode) {
    createCoords = e.latlng;
    updateCreateMarker(e.latlng);
    renderCreateForm();
    return;
  }
  // —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  if (currentlyEditingIndex !== null) {
    editingCoords = e.latlng;
    updateEditMarker(e.latlng);
    renderNotes();
    return;
  }
  // –Ω–µ —Å–æ–∑–¥–∞—ë–º, –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º ‚Äî –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –≤ –≤–µ—Ä—Ö–Ω–µ–º input ‚Üí –Ω–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ
  const txt = input.value.trim();
  if (!txt) return;
  createMode   = true;
  createText   = txt;
  createCoords = e.latlng;
  input.value  = '';
  updateCreateMarker(e.latlng);
  renderCreateForm();
});

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 9. –ö–Ω–æ–ø–∫–∏ –∏ –ø–æ–ª—è –≤–≤–æ–¥–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
saveBtn.onclick = () => {
  const txt = input.value.trim();
  if (!txt) return;
  createMode = true;
  createText = txt;
  createCoords = null;
  input.value = '';
  renderCreateForm();
};

locateBtn.onclick = () => {
  if (!navigator.geolocation) { alert('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è'); return; }
  navigator.geolocation.getCurrentPosition(
    pos => {
      const latlng = [pos.coords.latitude, pos.coords.longitude];
      map.setView(latlng, 15);
      if (userMarker) map.removeLayer(userMarker);
      userMarker = L.marker(latlng, {
        icon: L.icon({
          iconUrl: 'https://maps.gstatic.com/mapfiles/ms2/micons/blue-dot.png',
          iconSize: [32, 32]
        })
      }).addTo(map).bindPopup('–í—ã –∑–¥–µ—Å—å').openPopup();
    },
    () => alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é')
  );
};

// –ü–æ–∏—Å–∫ –ø–æ –∞–¥—Ä–µ—Å—É –∏–ª–∏ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º (Enter –≤ –ø–æ–ª–µ)
locationInp.addEventListener('keydown', e => {
  if (e.key !== 'Enter') return;
  const query = locationInp.value.trim();
  if (!query) return;

  // 1) –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
  const coordParts = query.split(',').map(Number);
  if (coordParts.length === 2 && !coordParts.some(isNaN)) {
    const latlng = { lat: coordParts[0], lng: coordParts[1] };
    map.setView(latlng, 15);
    if (createMode) {
      createCoords = latlng;
      updateCreateMarker(latlng);
      renderCreateForm();
    }
    if (currentlyEditingIndex !== null) {
      editingCoords = latlng;
      updateEditMarker(latlng);
      renderNotes();
    }
    return;
  }

  // 2) –ø–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–∞ —á–µ—Ä–µ–∑ Nominatim
  fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(query)}`)
    .then(r => r.json())
    .then(res => {
      if (!res.length) { alert('–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'); return; }
      const lat = parseFloat(res[0].lat);
      const lng = parseFloat(res[0].lon);
      const latlng = { lat, lng };
      map.setView(latlng, 15);

      if (createMode) {
        createCoords = latlng;
        updateCreateMarker(latlng);
        renderCreateForm();
      }
      if (currentlyEditingIndex !== null) {
        editingCoords = latlng;
        updateEditMarker(latlng);
        renderNotes();
      }
    })
    .catch(() => alert('–û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–µ—Ä–∞'));
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–º–µ—Ç–æ–∫ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã (—Ñ–∏–ª—å—Ç—Ä –ø–æ bounds)
map.on('moveend', () => {
  const bounds = map.getBounds();
  Array.from(list.children).forEach((li, idx) => {
    const note = notes[idx];
    if (!note) return;                         // –ø—Ä–∏ create/edit –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    li.style.display = bounds.contains(note.latlng) ? '' : 'none';
  });
});

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 10. –ü–µ—Ä–≤–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
renderNotes();
