/*  NoteMap PWA ‚Äì script.js  (v5.2, full)  */
/*  --------------------------------------  */
/*  –¢—Ä–µ–±—É–µ—Ç —Ç–æ–ª—å–∫–æ Leaflet CDN –∏ HTML-—Ä–∞–∑–º–µ—Ç–∫—É:             */
/*  - div#map, sidebar —Å  #note-list, #note-input, buttons  */
/*  - input#location-input, button#locate-btn, button#save-btn */

//////////////////// 1. –ö–∞—Ä—Ç–∞ –∏ —Ç–∞–π–ª—ã ////////////////////
const map = L.map('map').setView([55.75, 37.61], 10);        // –ú–æ—Å–∫–≤–∞ by default
L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
  maxZoom: 19,
  attribution: '¬© OpenStreetMap'
}).addTo(map);

//////////////////// 2. –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã ////////////////////
let userMarker   = null;   // ¬´–í—ã –∑–¥–µ—Å—å¬ª
let createMarker = null;   // –º–∞—Ä–∫–µ—Ä –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
let editMarker   = null;   // –º–∞—Ä–∫–µ—Ä –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏

//////////////////// 3. –°–æ—Å—Ç–æ—è–Ω–∏—è ////////////////////
const notes  = JSON.parse(localStorage.getItem('notes') || '[]');
let createMode            = false;
let createText            = '';
let createCoords          = null;
let currentlyEditingIndex = null;
let editingCoords         = null;

//////////////////// 4. DOM ////////////////////
const list        = document.getElementById('note-list');
const input       = document.getElementById('note-input');
const saveBtn     = document.getElementById('save-btn');
const locateBtn   = document.getElementById('locate-btn');
const locationInp = document.getElementById('location-input');

//////////////////// 5. –£—Ç–∏–ª–∏—Ç—ã ////////////////////
const saveNotes = () => localStorage.setItem('notes', JSON.stringify(notes));

function autoGrow(el, extraLine = false) {
  const lineHeight = parseFloat(getComputedStyle(el).lineHeight) || 20;
  const currentHeight = el.clientHeight;
  el.style.height = 'auto';
  let newHeight = el.scrollHeight + (extraLine ? lineHeight : 0);
  if (newHeight < currentHeight) newHeight = currentHeight;
  el.style.height = newHeight + 'px';
}

function updateCreateMarker(latlng) {
  if (createMarker) map.removeLayer(createMarker);
  createMarker = L.marker(latlng, { draggable: false })
                  .addTo(map)
                  .bindPopup('–ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞')
                  .openPopup();
}

function updateEditMarker(latlng) {
  if (editMarker) map.removeLayer(editMarker);
  editMarker = L.marker(latlng, { draggable: false })
                .addTo(map)
                .bindPopup('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ')
                .openPopup();
}

function redrawMarkers() {
  map.eachLayer(l => {
    if (l instanceof L.Marker && ![userMarker, createMarker, editMarker].includes(l)) {
      map.removeLayer(l);
    }
  });
  notes.forEach(n => L.marker(n.latlng).addTo(map).bindPopup(n.text));
}

//////////////////// 6. –†–∏—Å—É–µ–º —Å–ø–∏—Å–æ–∫ ////////////////////
function renderNotes() {
  list.innerHTML = '';
  redrawMarkers();

  notes.forEach((note, i) => {
    const li = document.createElement('li');

    // ----- —Ä–µ–¥–∞–∫—Ç–æ—Ä -----
    if (currentlyEditingIndex === i) {
      const ta = document.createElement('textarea');
      ta.value = note.text;
      ta.rows  = 6;
      ta.style.width = '100%';
      ta.style.resize = 'vertical';
      ta.oninput = () => { autoGrow(ta); };
      autoGrow(ta, true);

      const coordInput = document.createElement('input');
      coordInput.type  = 'text';
      coordInput.style.width = '100%';
      coordInput.value = `${(editingCoords || note.latlng).lat.toFixed(5)},${(editingCoords || note.latlng).lng.toFixed(5)}`;
      coordInput.oninput = () => {
        const [lat,lng] = coordInput.value.split(',').map(Number);
        if (!isNaN(lat) && !isNaN(lng)) {
          editingCoords = { lat, lng };
          updateEditMarker(editingCoords);
        }
      };
      updateEditMarker(editingCoords || note.latlng);

      const tip = document.createElement('div');
      tip.textContent = '–ö–ª–∏–∫–Ω–∏—Ç–µ –ø–æ –∫–∞—Ä—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ lat,lng';
      tip.style.fontSize = '0.8em'; tip.style.color = '#666';

      const save = document.createElement('button');
      save.textContent = 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å';
      save.onclick = () => {
        note.text = ta.value;
        if (editingCoords) note.latlng = editingCoords;
        currentlyEditingIndex = null;
        editingCoords = null;
        if (editMarker) { map.removeLayer(editMarker); editMarker = null; }
        saveNotes(); renderNotes();
      };

      const cancel = document.createElement('button');
      cancel.textContent = '‚ùå –û—Ç–º–µ–Ω–∞';
      cancel.onclick = () => {
        currentlyEditingIndex = null;
        editingCoords = null;
        if (editMarker) { map.removeLayer(editMarker); editMarker = null; }
        renderNotes();
      };

      li.append(ta, coordInput, save, cancel, tip);
      list.appendChild(li);
      return;
    }

    // ----- –ø—Ä–æ—Å–º–æ—Ç—Ä -----
    const text = document.createElement('div');
    text.className = 'note-text';                    // —Å—Ç–∏–ª—å –≤ CSS
    text.textContent = note.text;

    const coord = document.createElement('div');
    coord.textContent = `–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${note.latlng.lat.toFixed(5)}, ${note.latlng.lng.toFixed(5)}`;
    coord.style.fontSize = '0.9em'; coord.style.color = '#777';

    const edit = document.createElement('button');
    edit.textContent = '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å';
    edit.onclick = () => {
      currentlyEditingIndex = i;
      editingCoords = null;
      renderNotes();
    };

    const del = document.createElement('button');
    del.textContent = 'üóëÔ∏è'; del.title = '–£–¥–∞–ª–∏—Ç—å';
    del.onclick = () => {
      if (confirm('–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É?')) {
        notes.splice(i,1); saveNotes(); renderNotes();
      }
    };

    li.append(text, coord, edit, del);
    list.appendChild(li);
  });
}

//////////////////// 7. –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è ////////////////////
function renderCreateForm() {
  list.innerHTML = '';
  const li = document.createElement('li');

  const ta = document.createElement('textarea');
  ta.rows = 6; ta.style.width='100%'; ta.style.resize='vertical';
  ta.value = createText; autoGrow(ta, true);
  ta.oninput = () => { createText = ta.value; autoGrow(ta); };

  const coordInput = document.createElement('input');
  coordInput.type='text'; coordInput.style.width='100%';
  if (createCoords) coordInput.value = `${createCoords.lat.toFixed(5)},${createCoords.lng.toFixed(5)}`;
  coordInput.oninput = () => {
    const [lat,lng] = coordInput.value.split(',').map(Number);
    if (!isNaN(lat)&&!isNaN(lng)) {
      createCoords={lat,lng}; updateCreateMarker(createCoords);
    }
  };
  if (createCoords) updateCreateMarker(createCoords);

  const tip=document.createElement('div');
  tip.textContent='–ö–ª–∏–∫–Ω–∏—Ç–µ –ø–æ –∫–∞—Ä—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ lat,lng';
  tip.style.fontSize='0.8em'; tip.style.color='#666';

  const add=document.createElement('button');
  add.textContent='üíæ –î–æ–±–∞–≤–∏—Ç—å';
  add.onclick=()=>{
    if(!createCoords){alert('–£–∫–∞–∂–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã');return;}
    notes.push({text:createText,latlng:createCoords});
    saveNotes();
    if(createMarker){map.removeLayer(createMarker);createMarker=null;}
    createMode=false;createText='';createCoords=null;
    renderNotes();
  };

  const cancel=document.createElement('button');
  cancel.textContent='‚ùå –û—Ç–º–µ–Ω–∞';
  cancel.onclick=()=>{
    if(createMarker){map.removeLayer(createMarker);createMarker=null;}
    createMode=false;createText='';createCoords=null; renderNotes();
  };

  li.append(ta,coordInput,add,cancel,tip);
  list.appendChild(li);
}

//////////////////// 8. –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞—Ä—Ç—ã ////////////////////
map.on('click', e => {
  if(createMode){ createCoords = e.latlng; updateCreateMarker(e.latlng); renderCreateForm(); return; }
  if(currentlyEditingIndex!==null){ editingCoords=e.latlng; updateEditMarker(e.latlng); renderNotes(); return; }

  const txt=input.value.trim();
  if(!txt) return;
  createMode=true; createText=txt; createCoords=e.latlng; input.value='';
  updateCreateMarker(e.latlng); renderCreateForm();
});

//////////////////// 9. –ö–Ω–æ–ø–∫–∏ ////////////////////
saveBtn.onclick = () => {
  const txt=input.value.trim(); if(!txt) return;
  createMode=true; createText=txt; createCoords=null; input.value='';
  renderCreateForm();
};

locateBtn.onclick = () => {
  if(!navigator.geolocation){alert('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');return;}
  navigator.geolocation.getCurrentPosition(pos=>{
    const latlng=[pos.coords.latitude,pos.coords.longitude];
    map.setView(latlng,15);
    if(userMarker) map.removeLayer(userMarker);
    userMarker=L.marker(latlng,{icon:L.icon({
      iconUrl:'https://maps.gstatic.com/mapfiles/ms2/micons/blue-dot.png',
      iconSize:[32,32]
    })}).addTo(map).bindPopup('–í—ã –∑–¥–µ—Å—å').openPopup();
  },()=>alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é'));
};

//////////////////// 10. –ü–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–∞/–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç ////////////////////
locationInp.addEventListener('keydown', e=>{
  if(e.key!=='Enter')return;
  e.preventDefault();
  const q=locationInp.value.trim(); if(!q) return;

  const parts=q.split(',').map(Number);
  if(parts.length===2 && !parts.some(isNaN)){
    jumpTo({lat:parts[0],lng:parts[1]}); return;
  }
  fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(q)}`)
    .then(r=>r.json())
    .then(res=>{
      if(!res.length){alert('–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');return;}
      jumpTo({lat:+res[0].lat,lng:+res[0].lon});
    })
    .catch(()=>alert('–û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–µ—Ä–∞'));
});

function jumpTo(latlng){
  map.setView(latlng,15);
  if(createMode){ createCoords=latlng; updateCreateMarker(latlng); renderCreateForm(); }
  else if(currentlyEditingIndex!==null){ editingCoords=latlng; updateEditMarker(latlng); renderNotes(); }
}

//////////////////// 11. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ –≥—Ä–∞–Ω–∏—Ü–∞–º ////////////////////
map.on('moveend', ()=>{
  const b=map.getBounds();
  Array.from(list.children).forEach((li,idx)=>{
    const n=notes[idx]; if(!n) return;
    li.style.display = b.contains(n.latlng) ? '' : 'none';
  });
});

//////////////////// 12. –ü–µ—Ä–≤–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ ////////////////////
renderNotes();
